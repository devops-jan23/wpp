name: "CI/CD"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  Linting:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: sudo apt-get install -y cppcheck

      - name: Build project
        run: |
          make

      - name: Run linting
        run: cppcheck --quiet --error-exitcode=1 .

      - name: Run tests
        run: |
          ctest --output-on-failure

  Build-Image:
    runs-on: ubuntu-latest
    needs: Linting

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set environment variable
        run: |
              echo "REPO_OWNER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ env.REPO_OWNER }}/wpp:latest .

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image to GitHub Container Registry
        run: |
          docker push ghcr.io/${{ env.REPO_OWNER }}/wpp:latest

  push-to-ecr:
    runs-on: ubuntu-latest
    needs: Build-Image
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
          
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
        env:
          AWS_AUDIENCE: sts.amazonaws.com
          
      - name: Set environment variable
        run: |
              echo "ECR_REGISTRY=public.ecr.aws/q6y0k8g3/hello-2048-lab" >> $GITHUB_ENV
          
      - name: Build Docker image
        run: |
                docker build -t ${{ env.ECR_REGISTRY }}:latest .
          
      - name: Login to Amazon ECR
        run: |
              ECR_PASSWORD=$(aws ecr-public get-login-password --region us-east-1)
              echo $ECR_PASSWORD | docker login --username AWS --password-stdin public.ecr.aws/q6y0k8g3
              
      - name: Push Docker image to Amazon ECR
        run: |
              docker push ${{ env.ECR_REGISTRY }}:latest
          

  deploy-to-elastic-beanstalk:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    
    steps:
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
        env:
          AWS_AUDIENCE: sts.amazonaws.com

      - name: Download the latest Docker image
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/q6y0k8g3
          docker pull ${{ env.ECR_REGISTRY }}:latest

      - name: Save Docker image as tar file
        run: |
          docker save -o image.tar ${{ env.ECR_REGISTRY }}:latest

      - name: Upload Docker image to S3
        run: |
          aws s3 cp image.tar s3://elasticbeanstalk-eu-west-1-000887275976/docker-images/image.tar

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: wpp
          environment_name: Wpp-env
          version_label: ${{ github.run_id }}
          source_bundle: s3://elasticbeanstalk-eu-west-1-000887275976/docker-images/image.tar
          region: eu-west-1
