name: "CI/CD"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  Linting:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: sudo apt-get install -y cppcheck

      - name: Build project
        run: |
          make

      - name: Run linting
        run: cppcheck --quiet --error-exitcode=1 .

      - name: Run tests
        run: |
          ctest --output-on-failure

  Build-Image:
    runs-on: ubuntu-latest
    needs: Linting

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set environment variable
        run: |
              echo "REPO_OWNER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ env.REPO_OWNER }}/wpp:latest .

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image to GitHub Container Registry
        run: |
          docker push ghcr.io/${{ env.REPO_OWNER }}/wpp:latest

  push-to-ecr:
    runs-on: ubuntu-latest
    needs: Build-Image
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
          
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
        env:
          AWS_AUDIENCE: sts.amazonaws.com
          
      - name: Set environment variable
        run: |
              echo "ECR_REGISTRY=public.ecr.aws/q6y0k8g3/hello-2048-lab" >> $GITHUB_ENV
          
      - name: Build Docker image
        run: |
                docker build -t ${{ env.ECR_REGISTRY }}:latest .
          
      - name: Login to Amazon ECR
        run: aws ecr-public get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          
      - name: Push Docker image to Amazon ECR
        run: |
              docker push ${{ env.ECR_REGISTRY }}:latest
          

  run-on-ecs:
    needs: push-to-ecr
    runs-on: ubuntu-latest

    steps:
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
        env:
          AWS_AUDIENCE: sts.amazonaws.com

      - name: Run Docker container on ECS
        run: |
          aws ecs run-task \
            --cluster cpp-cluster \
            --launch-type FARGATE \
            --task-definition cpp-docker-instance \
            --network-configuration awsvpcConfiguration={subnets=[subnet-0818b9561675ff47e]}
